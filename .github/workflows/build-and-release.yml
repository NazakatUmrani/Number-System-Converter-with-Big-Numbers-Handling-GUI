name: Build and Package Number System Converter GUI

on:
  push:
  #   tags:
  #     - '*'

jobs:
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Install Qt using jurplel/install-qt-action
        uses: jurplel/install-qt-action@v4.1.1
        with:
          version: '5.15.2'  # You can specify the Qt version you need
          host: 'linux'

      - name: Manually Install linuxdeployqt with fuse
        run: |
          # Download the linuxdeployqt AppImage
          wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          
          # Make the AppImage executable
          chmod +x linuxdeployqt-continuous-x86_64.AppImage
          
          # Move the AppImage to a directory in PATH (optional)
          sudo mv linuxdeployqt-continuous-x86_64.AppImage /usr/local/bin/linuxdeployqt.AppImage
          
          # Install Fuse and libfuse
          sudo apt-get install fuse libfuse2

      - name: Create Build Folder
        run: mkdir build && cd build

      - name: Build Project with qmake and make
        run: |
          cd build
          qmake ..
          make -j$(nproc)  # Adjust parallel jobs based on the number of CPU cores
      
      - name: Copy Icon from img Folder
        run: |
          # Copy your image from the img folder (located in the root) to the correct location in the AppImage
          mkdir -p build/AppDir/usr/share/icons/hicolor/256x256/apps
          cp img/NumberSystemConverterGUI.png build/AppDir/usr/share/icons/hicolor/256x256/NumberSystemConverterGUI.png
          # Ensure the icon has the correct permissions
          chmod 644 build/AppDir/usr/share/icons/hicolor/256x256/NumberSystemConverterGUI.png
  
      - name: Create Desktop File
        run: |
          cd build
          mkdir -p AppDir/usr/share/applications
          cat > AppDir/usr/share/applications/NumberSystemConverterGUI.desktop <<EOF
          [Desktop Entry]
          Name=NumberSystemConverterGUI
          Exec=NumberSystemConverterGUI
          Icon=NumberSystemConverterGUI
          Type=Application
          Comment=Convert between different number systems with big numbers handling.
          Categories=Utility;
          EOF

      # Uncomment the line below when you're ready to deploy based on tags
      # - name: Extract Version from Tag (if any)
      #   id: version-extract
      #   run: |
      #     VERSION=${GITHUB_REF#refs/tags/}
      #     echo "Extracted version: $VERSION"
      #     echo "VERSION=$VERSION" >> $GITHUB_ENV
  
      # Static version used for testing (you can remove this once you switch to tags)
      - name: Set Version
        run: echo "VERSION=1.0.0" >> $GITHUB_ENV
    
      - name: List Build Directory Contents
        run: ls -l build

      - name: Package Linux App with linuxdeployqt
        run: |
          cd build
          mkdir -p AppDir/usr/bin
          cp NumberSystemConverterGUI AppDir/usr/bin/
          /usr/local/bin/linuxdeployqt.AppImage AppDir/usr/share/applications/NumberSystemConverterGUI.desktop -appimage

      - name: List Contents
        run: ls -l build/AppDir
  
      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4.5.0
        with:
          name: Linux-AppImage
          path: build/NumberSystemConverterGUI*.AppImage
          compression-level: 0

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Install Qt using jurplel/install-qt-action
        uses: jurplel/install-qt-action@v4.1.1
        with:
          version: '5.15.2'
          host: 'windows'
          arch: 'win64_mingw81'
          add-to-path: true

      - name: Manually Install MinGW
        run: |
          # Download MinGW
          curl -L -o mingw.7z https://github.com/niXman/mingw-builds-binaries/releases/download/13.2.0-rt_v11-rev0/x86_64-13.2.0-release-posix-seh-ucrt-rt_v11-rev0.7z
          # Create installation directory
          mkdir C:\mingw
          # Extract MinGW
          7z x mingw.7z -oC:\mingw
          # Add MinGW to PATH
          echo "C:\mingw\bin" >> $env:GITHUB_PATH
  
      - name: Create Build Folder
        run: mkdir build

      - name: Build Project with qmake and mingw32-make
        run: |
          cd build
          qmake -spec win32-g++ ..
          mingw32-make
  
      - name: Debug Build Directory
        run: ls -l build
      
      - name: Check if windeployqt.exe exists
        run: |
          if (Test-Path "C:\Qt\5.15.2\mingw81_64\bin\windeployqt.exe") {
            Write-Host "windeployqt.exe found!"
          } else {
            Write-Host "windeployqt.exe not found!"
          }
      
      - name: Package Windows App with windeployqt
        run: |
          cd build
          # Use the QT_ROOT_DIR variable to access the Qt installation and run windeployqt
          & "$env:QT_ROOT_DIR\bin\windeployqt.exe" release/NumberSystemConverterGUI.exe

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4.5.0
        with:
          name: Windows-Executable
          path: build/release/NumberSystemConverterGUI.exe
          compression-level: 0

  build-macos:
    name: Build for MacOS
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Install Qt using jurplel/install-qt-action
        uses: jurplel/install-qt-action@v4.1.1
        with:
          version: '5.15.2'  # You can specify the Qt version you need
          host: 'mac'

      - name: Create Build Folder
        run: mkdir build && cd build

      - name: Build Project with qmake and make
        run: |
          cd build
          qmake ..
          make -j$(sysctl -n hw.ncpu)  # Automatically use all CPU cores
          ls

      - name: Package MacOS App
        run: |
          cd build
          ls
          macdeployqt NumberSystemConverterGUI.app

      - name: Upload MacOS Artifact
        uses: actions/upload-artifact@v4.5.0
        with:
          name: MacOS-App
          path: build/NumberSystemConverterGUI.app
          compression-level: 0

  upload-release:
    name: Upload All Artifacts to Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: Linux-AppImage

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: Windows-Executable

      - name: Download MacOS Artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: MacOS-App

      # Verify the downloaded files
      - name: List downloaded files
        run: |
            ls -al ${{ github.workspace }}
            ls -al ${{ github.workspace }}/Contents

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: "Release for version ${{ github.ref_name }}"
        
      - name: Find .AppImage file
        id: find_appimage  # Add an ID to the step so outputs can be referenced
        run: |
          # Search for the .AppImage file dynamically
          appimage_file=$(find ${{ github.workspace }} -type f -name "NumberSystemConverterGUI*.AppImage")
          echo "Found appimage: $appimage_file"
          echo "::set-output name=appimage_path::$appimage_file"
      
      - name: Upload Linux Artifact to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_appimage.outputs.appimage_path }}
          asset_name: $(basename ${{ steps.find_appimage.outputs.appimage_path }})
          asset_content_type: application/vnd.appimage
        
      - name: Upload Windows Artifact to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/NumberSystemConverterGUI.exe
          asset_name: "NumberSystemConverterGUI-windows-${{ github.ref_name }}.exe"
          asset_content_type: application/octet-stream

      - name: Upload MacOS Artifact to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/NumberSystemConverterGUI.app
          asset_name: "NumberSystemConverterGUI-MacOS-${{ github.ref_name }}.app"
          asset_content_type: application/octet-stream
